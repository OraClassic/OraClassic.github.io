// 카테고리 태그를 포스트 제목에 자동 추가하는 스크립트
document.addEventListener('DOMContentLoaded', function() {
    // Recent Posts 섹션의 포스트 제목들 처리
    const postTitles = document.querySelectorAll('.archive__item-title a, .list__item .archive__item-title a');
    
    postTitles.forEach(function(titleLink) {
        // URL에서 카테고리 추출 (예: /categories/database/oracle/install/...)
        const href = titleLink.getAttribute('href');
        if (href && href.includes('/categories/')) {
            const pathParts = href.split('/').filter(part => part !== ''); // 빈 문자열 제거
            const categoryIndex = pathParts.indexOf('categories');
            
                if (categoryIndex !== -1 && pathParts.length > categoryIndex + 2) {
                    // categories 다음 두 번째와 세 번째 디렉토리 추출
                    let parentCategory = pathParts[categoryIndex + 1]; // database, os, app 등
                    let category = pathParts[categoryIndex + 2]; // oracle, mysql, linux 등
                    category = category.charAt(0).toUpperCase() + category.slice(1);
                    
                    // 이미 태그가 있는지 확인
                    if (!titleLink.querySelector('.category-tag')) {
                        // 카테고리 태그 생성
                        const categoryTag = document.createElement('span');
                        categoryTag.className = 'category-tag';
                        categoryTag.setAttribute('data-category', category);
                        categoryTag.setAttribute('data-parent', parentCategory); // 두 번째 디렉토리 추가
                        
                        // 카테고리별 아이콘 설정
                        let icon = getIconForCategory(category.toLowerCase());
                        categoryTag.innerHTML = icon + ' ' + category;
                    
                    // 제목 앞에 태그 추가
                    const originalText = titleLink.textContent;
                    titleLink.textContent = '';
                    titleLink.appendChild(categoryTag);
                    titleLink.appendChild(document.createTextNode(' ' + originalText));
                }
            }
        }
    });

// 카테고리별 아이콘을 반환하는 함수
function getIconForCategory(category) {
    const iconMap = {
        // 데이터베이스 DBMS
        'oracle': '🔴',          // Oracle 빨간 원
        'mysql': '🟡',           // MySQL 노란 원 (돌고래 대신)
        'postgresql': '🔵',      // PostgreSQL 파란 원
        'postgres': '🔵',        // PostgreSQL 축약
        'mongodb': '🟢',         // MongoDB 초록 원
        'redis': '🔴',           // Redis 빨간색
        'sqlite': '🔘',          // SQLite 회색 원
        'mariadb': '🔵',         // MariaDB 파란색
        'cassandra': '🟡',       // Cassandra 노란색
        'elasticsearch': '🟡',   // Elasticsearch 노란색
        'neo4j': '🟢',           // Neo4j 초록색
        
        // 클라우드 서비스
        'aws': '🟠',             // AWS 주황색
        'azure': '🔵',           // Azure 파란색
        'gcp': '🔴',             // Google Cloud 빨간색
        'docker': '🔵',          // Docker 파란색
        'kubernetes': '🔵',      // Kubernetes 파란색
        'k8s': '🔵',             // Kubernetes 축약
        
        // 프로그래밍 언어 (실제 로고 색상 반영)
        'java': '🟠',            // Java 주황색 (커피 대신)
        'python': '🟡',          // Python 노란색 (실제 Python 색상)
        'javascript': '🟡',      // JavaScript 노란색
        'js': '🟡',              // JavaScript 축약
        'typescript': '🔵',      // TypeScript 파란색
        'ts': '🔵',              // TypeScript 축약
        'go': '🔵',              // Go 파란색 (고퍼 대신)
        'rust': '🟠',            // Rust 주황색
        'php': '🟣',             // PHP 보라색
        'ruby': '🔴',            // Ruby 빨간색
        'csharp': '🟣',          // C# 보라색
        'cpp': '🔵',             // C++ 파란색
        'c': '🔵',               // C 파란색
        
        // 웹 기술
        'react': '🔵',           // React 파란색
        'vue': '🟢',             // Vue.js 초록색
        'angular': '🔴',         // Angular 빨간색
        'nodejs': '🟢',          // Node.js 초록색
        'node': '🟢',            // Node.js 축약
        'express': '⚫',         // Express 검정색
        'django': '🟢',          // Django 초록색
        'flask': '⚫',           // Flask 검정색
        'spring': '🟢',          // Spring 초록색
        'laravel': '🔴',         // Laravel 빨간색
        
        // 운영체제
        'linux': '🐧',           // Linux 펭귄 (그대로 유지)
        'ubuntu': '🟠',          // Ubuntu 주황색
        'centos': '🟣',          // CentOS 보라색
        'redhat': '🔴',          // RedHat 빨간색
        'windows': '🔵',         // Windows 파란색
        'macos': '⚫',           // macOS 검정색
        'unix': '⚫',            // Unix 검정색
        
        // 도구 및 기타
        'git': '🟠',             // Git 주황색
        'github': '⚫',          // GitHub 검정색
        'gitlab': '🟠',          // GitLab 주황색
        'jenkins': '🔵',         // Jenkins 파란색
        'ansible': '🔴',         // Ansible 빨간색
        'terraform': '🟣',       // Terraform 보라색
        'nginx': '🟢',           // Nginx 초록색
        'apache': '🔴',          // Apache 빨간색
        'tomcat': '🟡',          // Tomcat 노란색
        'kafka': '⚫',           // Kafka 검정색
        'spark': '🟠',           // Apache Spark 주황색
        'hadoop': '🟡',          // Hadoop 노란색
        
        // 설치/성능/보안 카테고리
        'install': '⚙️',         // 설치 기어
        'performance': '📊',     // 성능 차트
        'security': '🔒',        // 보안 자물쇠
        'monitoring': '📈',      // 모니터링 그래프
        'backup': '💾',          // 백업 디스크
        'migration': '🚚',       // 마이그레이션 트럭
        'troubleshooting': '🔧', // 문제해결 도구
        'optimization': '🚀',    // 최적화 로켓
        'configuration': '⚙️',   // 구성 기어
        'deployment': '🚀',      // 배포 로켓
    };
    
    return iconMap[category] || '📁'; // 기본 아이콘
}
    
    // 개별 포스트 페이지의 제목 처리
    const pageTitle = document.querySelector('.page__title');
    if (pageTitle && window.location.pathname.includes('/categories/')) {
        const pathParts = window.location.pathname.split('/').filter(part => part !== '');
        const categoryIndex = pathParts.indexOf('categories');
        
        if (categoryIndex !== -1 && pathParts.length > categoryIndex + 2) {
            let parentCategory = pathParts[categoryIndex + 1];
            let category = pathParts[categoryIndex + 2];
            category = category.charAt(0).toUpperCase() + category.slice(1);
            
            // 이미 태그가 있는지 확인
            if (!pageTitle.querySelector('.category-tag')) {
                const categoryTag = document.createElement('span');
                categoryTag.className = 'category-tag';
                categoryTag.setAttribute('data-category', category);
                categoryTag.setAttribute('data-parent', parentCategory);
                
                // 카테고리별 아이콘 설정
                let icon = getIconForCategory(category.toLowerCase());
                categoryTag.innerHTML = icon + ' ' + category;
                
                // 제목 앞에 태그 추가
                pageTitle.insertBefore(categoryTag, pageTitle.firstChild);
                pageTitle.insertBefore(document.createTextNode(' '), categoryTag.nextSibling);
            }
        }
    }
    
    // 포스트 메타데이터에서 카테고리 추출하는 대안 방법
    const taxonomyItems = document.querySelectorAll('.page__taxonomy-item');
    if (taxonomyItems.length > 0 && pageTitle && !pageTitle.querySelector('.category-tag')) {
        // 마지막 카테고리를 주 카테고리로 사용
        const lastCategory = taxonomyItems[taxonomyItems.length - 1];
        const categoryText = lastCategory.textContent.trim();
        
        const categoryTag = document.createElement('span');
        categoryTag.className = 'category-tag';
        categoryTag.setAttribute('data-category', categoryText);
        categoryTag.setAttribute('data-parent', 'fallback'); // 기본값 설정
        
        // 카테고리별 아이콘 설정
        let icon = getIconForCategory(categoryText.toLowerCase());
        categoryTag.innerHTML = icon + ' ' + categoryText;
        
        pageTitle.insertBefore(categoryTag, pageTitle.firstChild);
        pageTitle.insertBefore(document.createTextNode(' '), categoryTag.nextSibling);
    }
});

// 페이지 로드 후에도 실행 (AJAX 로딩 대응)
window.addEventListener('load', function() {
    setTimeout(function() {
        // Recent Posts가 동적으로 로드되는 경우를 위한 재실행
        const event = new Event('DOMContentLoaded');
        document.dispatchEvent(event);
    }, 1000);
});
